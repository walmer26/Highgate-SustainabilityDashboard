"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import dotenv_values


# Get the environment and load the appropriate .env file
ENVIRONMENT = os.getenv('DJANGO_ENVIRONMENT')

if ENVIRONMENT == 'production':
    dotenv_path = ".env.production"
else:
    dotenv_path = ".env.development"

# Load the .env file
config = dotenv_values(dotenv_path)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
STATIC_DIR = BASE_DIR.joinpath('static')
TEMPLATE_DIR = BASE_DIR.joinpath('templates')


# https://docs.djangoproject.com/en/5.0/ref/settings/#admins

ADMINS = (
    (config['PROJECT_ADMIN_NAME'], config['PROJECT_ADMIN_EMAIL']),
)

MANAGERS = ADMINS


# https://docs.allauth.org/en/latest/installation/quickstart.html
# Added during AllAuth installation

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth', # AllAuth
    'allauth.account', # AllAuth
    'allauth.socialaccount', # AllAuth
    'allauth.socialaccount.providers.google', # AllAuth 
    'allauth.mfa', # AllAuth 
    'apps.users',
    'apps.dashboard',
    'apps.upload',
]


MIDDLEWARE = [
    'allauth.account.middleware.AccountMiddleware', #AllAuth
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


ROOT_URLCONF = 'project.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


WSGI_APPLICATION = 'project.wsgi.application'


ASGI_APPLICATION = 'project.asgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en'

TIME_ZONE = 'America/New_York'

USE_I18N = True

USE_TZ = True

# Uncomment the language you want to use when available. 
LANGUAGES = [
    # ("ar", "Arabic"),
    # ("az", "Azerbaijani"),
    # ("bg", "Bulgarian"),
    # ("ca", "Catalan"),
    # ("cs", "Czech"),
    # ("da", "Danish"),
    # ("de", "German"),
    # ("el", "Greek"),
    ("en", "English"),
    ("es", "Spanish"),
    # ("et", "Estonian"),
    # ("eu", "Basque"),
    # ("fa", "Persian"),
    # ("fi", "Finnish"),
    # ("fr", "French"),
    # ("he", "Hebrew"),
    # ("hr", "Croatian"),
    # ("hu", "Hungarian"),
    # ("id", "Indonesian"),
    # ("it", "Italian"),
    # ("ja", "Japanese"),
    # ("ka", "Georgian"),
    # ("ko", "Korean"),
    # ("ky", "Kyrgyz"),
    # ("lt", "Lithuanian"),
    # ("lv", "Latvian"),
    # ("mn", "Mongolian"),
    # ("nb", "Norwegian Bokm√•l"),
    # ("nl", "Dutch"),
    # ("pl", "Polish"),
    # ("pt-BR", "Portuguese (Brazil)"),
    # ("pt-PT", "Portuguese (Portugal)"),
    # ("ro", "Romanian"),
    # ("ru", "Russian"),
    # ("sk", "Slovak"),
    # ("sl", "Slovenian"),
    # ("sr", "Serbian"),
    # ("sr-Latn", "Serbian (Latin)"),
    # ("sv", "Swedish"),
    # ("th", "Thai"),
    # ("tr", "Turkish"),
    # ("uk", "Ukrainian"),
    # ("zh-hans", "Chinese (Simplified)"),
    # ("zh-hant", "Chinese (Traditional)"),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR.joinpath('staticfiles')

STATICFILES_DIRS = [
    STATIC_DIR,
]


# Media files uploaded by user.

MEDIA_URL = 'media/'

MEDIA_ROOT = BASE_DIR.joinpath('media')


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model
# To use our own user model that inherits from django users directly
# This suits well with django-AllAuth authentications as it integrates with django users directly.

AUTH_USER_MODEL = 'users.User'


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}


# https://docs.allauth.org/en/latest/installation/quickstart.html
# AllAuth configuration setup

# providers
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
            'openid'
        ],
        'AUTH_PARAMS':{
            'access_type': 'online'
        },
        'APP': {
            'client_id': config['GOOGLE_OAUTH_CLIENT_ID'],
            'secret': config['GOOGLE_OAUTH_SECRET']
        }
    }
}

# Configuration
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/accounts/login/'
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

# mfa
MFA_ADAPTER = "allauth.mfa.adapter.DefaultMFAAdapter"

# https://docs.allauth.org/en/latest/account/forms.html
ACCOUNT_FORMS = {
    'signup': 'apps.users.forms.MyCustomSignupForm'
    }

# Point to custom account adapter at users app.
ACCOUNT_ADAPTER = 'apps.users.adapter.CustomAccountAdapter'

# Allow or disallow signup.
ACCOUNT_ALLOW_SIGNUPS = True